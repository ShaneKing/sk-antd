'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _skJs = require('sk-js');

var _Const = require('../../Const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommonTip = function CommonTip() {
  _classCallCheck(this, CommonTip);
};

CommonTip.defaultProps = _skJs.SK.assign({}, {
  arrowPointAtCenter: false,
  autoAdjustOverflow: true,
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0.1,
  placement: _Const.PLACEMENT.Top,
  trigger: _Const.TRIGGER.Hover,
  defaultVisible: false,
  visible: false
}, {});
CommonTip.propTypes = _skJs.SK.assign({}, {
  //https://ant.design/components/tooltip-cn/#%E5%85%B1%E5%90%8C%E7%9A%84-API
  arrowPointAtCenter: _propTypes2.default.bool,
  autoAdjustOverflow: _propTypes2.default.bool,
  getPopupContainer: _propTypes2.default.func,
  mouseEnterDelay: _propTypes2.default.number,
  mouseLeaveDelay: _propTypes2.default.number,
  overlayClassName: _propTypes2.default.string,
  overlayStyle: _propTypes2.default.object,
  placement: _propTypes2.default.oneOf(Object.values(_Const.PLACEMENT)),
  trigger: _propTypes2.default.string,
  defaultVisible: _propTypes2.default.bool,
  visible: _propTypes2.default.bool,
  onCollapse: _propTypes2.default.func,
  //https://ant.design/components/tooltip-cn/#%E6%B3%A8%E6%84%8F
  onMouseEnter: _propTypes2.default.func,
  onMouseLeave: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onClick: _propTypes2.default.func
}, {});
exports.default = CommonTip;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFudGQvdG9vbHRpcC9Db21tb25UaXAuanMiXSwibmFtZXMiOlsiQ29tbW9uVGlwIiwiZGVmYXVsdFByb3BzIiwiYXNzaWduIiwiYXJyb3dQb2ludEF0Q2VudGVyIiwiYXV0b0FkanVzdE92ZXJmbG93IiwibW91c2VFbnRlckRlbGF5IiwibW91c2VMZWF2ZURlbGF5IiwicGxhY2VtZW50IiwiVG9wIiwidHJpZ2dlciIsIkhvdmVyIiwiZGVmYXVsdFZpc2libGUiLCJ2aXNpYmxlIiwicHJvcFR5cGVzIiwiYm9vbCIsImdldFBvcHVwQ29udGFpbmVyIiwiZnVuYyIsIm51bWJlciIsIm92ZXJsYXlDbGFzc05hbWUiLCJzdHJpbmciLCJvdmVybGF5U3R5bGUiLCJvYmplY3QiLCJvbmVPZiIsIk9iamVjdCIsInZhbHVlcyIsIm9uQ29sbGFwc2UiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbkZvY3VzIiwib25DbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7Ozs7O0lBRXFCQSxTOzs7O0FBQUFBLFMsQ0FDWkMsWSxHQUFlLFNBQUdDLE1BQUgsQ0FBVSxFQUFWLEVBQWM7QUFDbENDLHNCQUFvQixLQURjO0FBRWxDQyxzQkFBb0IsSUFGYztBQUdsQ0MsbUJBQWlCLENBSGlCO0FBSWxDQyxtQkFBaUIsR0FKaUI7QUFLbENDLGFBQVcsaUJBQVVDLEdBTGE7QUFNbENDLFdBQVMsZUFBUUMsS0FOaUI7QUFPbENDLGtCQUFnQixLQVBrQjtBQVFsQ0MsV0FBUztBQVJ5QixDQUFkLEVBU25CLEVBVG1CLEM7QUFESFosUyxDQVdaYSxTLEdBQVksU0FBR1gsTUFBSCxDQUFVLEVBQVYsRUFBYztBQUMvQjtBQUNBQyxzQkFBb0Isb0JBQVVXLElBRkM7QUFHL0JWLHNCQUFvQixvQkFBVVUsSUFIQztBQUkvQkMscUJBQW1CLG9CQUFVQyxJQUpFO0FBSy9CWCxtQkFBaUIsb0JBQVVZLE1BTEk7QUFNL0JYLG1CQUFpQixvQkFBVVcsTUFOSTtBQU8vQkMsb0JBQWtCLG9CQUFVQyxNQVBHO0FBUS9CQyxnQkFBYyxvQkFBVUMsTUFSTztBQVMvQmQsYUFBVyxvQkFBVWUsS0FBVixDQUFnQkMsT0FBT0MsTUFBUCxrQkFBaEIsQ0FUb0I7QUFVL0JmLFdBQVMsb0JBQVVVLE1BVlk7QUFXL0JSLGtCQUFnQixvQkFBVUcsSUFYSztBQVkvQkYsV0FBUyxvQkFBVUUsSUFaWTtBQWEvQlcsY0FBWSxvQkFBVVQsSUFiUztBQWMvQjtBQUNBVSxnQkFBYyxvQkFBVVYsSUFmTztBQWdCL0JXLGdCQUFjLG9CQUFVWCxJQWhCTztBQWlCL0JZLFdBQVMsb0JBQVVaLElBakJZO0FBa0IvQmEsV0FBUyxvQkFBVWI7QUFsQlksQ0FBZCxFQW1CaEIsRUFuQmdCLEM7a0JBWEFoQixTIiwiZmlsZSI6ImFudGQvdG9vbHRpcC9Db21tb25UaXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU0sgfSBmcm9tICdzay1qcyc7XG5pbXBvcnQgeyBQTEFDRU1FTlQsIFRSSUdHRVIgfSBmcm9tICcuLi8uLi9Db25zdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1vblRpcCB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSBTSy5hc3NpZ24oe30sIHtcbiAgICBhcnJvd1BvaW50QXRDZW50ZXI6IGZhbHNlLFxuICAgIGF1dG9BZGp1c3RPdmVyZmxvdzogdHJ1ZSxcbiAgICBtb3VzZUVudGVyRGVsYXk6IDAsXG4gICAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gICAgcGxhY2VtZW50OiBQTEFDRU1FTlQuVG9wLFxuICAgIHRyaWdnZXI6IFRSSUdHRVIuSG92ZXIsXG4gICAgZGVmYXVsdFZpc2libGU6IGZhbHNlLFxuICAgIHZpc2libGU6IGZhbHNlLFxuICB9LCB7fSk7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSBTSy5hc3NpZ24oe30sIHtcbiAgICAvL2h0dHBzOi8vYW50LmRlc2lnbi9jb21wb25lbnRzL3Rvb2x0aXAtY24vIyVFNSU4NSVCMSVFNSU5MCU4QyVFNyU5QSU4NC1BUElcbiAgICBhcnJvd1BvaW50QXRDZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIGF1dG9BZGp1c3RPdmVyZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0UG9wdXBDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG1vdXNlRW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtb3VzZUxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgb3ZlcmxheUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvdmVybGF5U3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LnZhbHVlcyhQTEFDRU1FTlQpKSxcbiAgICB0cmlnZ2VyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlZmF1bHRWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNvbGxhcHNlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvL2h0dHBzOi8vYW50LmRlc2lnbi9jb21wb25lbnRzL3Rvb2x0aXAtY24vIyVFNiVCMyVBOCVFNiU4NCU4RlxuICAgIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgfSwge30pO1xufVxuIl19