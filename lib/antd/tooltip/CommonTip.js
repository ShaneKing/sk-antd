'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _skJs = require('sk-js');

var _Const = require('../../Const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommonTip = function CommonTip() {
  _classCallCheck(this, CommonTip);
};

CommonTip.defaultProps = _skJs.SK.assign({}, {
  arrowPointAtCenter: false,
  autoAdjustOverflow: true,
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0.1,
  placement: _Const.PLACEMENT.Top,
  trigger: _Const.TRIGGER.Hover,
  defaultVisible: false,
  visible: false
}, {});
CommonTip.propTypes = _skJs.SK.assign({}, {
  //https://ant.design/components/tooltip-cn/#%E5%85%B1%E5%90%8C%E7%9A%84-API
  arrowPointAtCenter: _propTypes2.default.bool,
  autoAdjustOverflow: _propTypes2.default.bool,
  getPopupContainer: _propTypes2.default.func,
  mouseEnterDelay: _propTypes2.default.number,
  mouseLeaveDelay: _propTypes2.default.number,
  overlayClassName: _propTypes2.default.string,
  overlayStyle: _propTypes2.default.object,
  placement: _propTypes2.default.oneOf(Object.values(_Const.PLACEMENT)),
  trigger: _propTypes2.default.string,
  defaultVisible: _propTypes2.default.bool,
  visible: _propTypes2.default.bool,
  onCollapse: _propTypes2.default.func,
  //https://ant.design/components/tooltip-cn/#%E6%B3%A8%E6%84%8F
  onMouseEnter: _propTypes2.default.func,
  onMouseLeave: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onClick: _propTypes2.default.func
}, {});
exports.default = CommonTip;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFudGQvdG9vbHRpcC9Db21tb25UaXAuanMiXSwibmFtZXMiOlsiQ29tbW9uVGlwIiwiZGVmYXVsdFByb3BzIiwiYXNzaWduIiwiYXJyb3dQb2ludEF0Q2VudGVyIiwiYXV0b0FkanVzdE92ZXJmbG93IiwibW91c2VFbnRlckRlbGF5IiwibW91c2VMZWF2ZURlbGF5IiwicGxhY2VtZW50IiwiVG9wIiwidHJpZ2dlciIsIkhvdmVyIiwiZGVmYXVsdFZpc2libGUiLCJ2aXNpYmxlIiwicHJvcFR5cGVzIiwiYm9vbCIsImdldFBvcHVwQ29udGFpbmVyIiwiZnVuYyIsIm51bWJlciIsIm92ZXJsYXlDbGFzc05hbWUiLCJzdHJpbmciLCJvdmVybGF5U3R5bGUiLCJvYmplY3QiLCJvbmVPZiIsIk9iamVjdCIsInZhbHVlcyIsIm9uQ29sbGFwc2UiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbkZvY3VzIiwib25DbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7Ozs7O0lBRXFCQSxTOzs7O0FBQUFBLFMsQ0FDWkMsWSxHQUFlLFNBQUdDLE1BQUgsQ0FBVSxFQUFWLEVBQWM7QUFDbENDLHNCQUFvQixLQURjO0FBRWxDQyxzQkFBb0IsSUFGYztBQUdsQ0MsbUJBQWlCLENBSGlCO0FBSWxDQyxtQkFBaUIsR0FKaUI7QUFLbENDLGFBQVcsaUJBQVVDLEdBTGE7QUFNbENDLFdBQVMsZUFBUUMsS0FOaUI7QUFPbENDLGtCQUFnQixLQVBrQjtBQVFsQ0MsV0FBUztBQVJ5QixDQUFkLEVBU25CLEVBVG1CLEM7QUFESFosUyxDQVdaYSxTLEdBQVksU0FBR1gsTUFBSCxDQUFVLEVBQVYsRUFBYztBQUMvQjtBQUNBQyxzQkFBb0Isb0JBQVVXLElBRkM7QUFHL0JWLHNCQUFvQixvQkFBVVUsSUFIQztBQUkvQkMscUJBQW1CLG9CQUFVQyxJQUpFO0FBSy9CWCxtQkFBaUIsb0JBQVVZLE1BTEk7QUFNL0JYLG1CQUFpQixvQkFBVVcsTUFOSTtBQU8vQkMsb0JBQWtCLG9CQUFVQyxNQVBHO0FBUS9CQyxnQkFBYyxvQkFBVUMsTUFSTztBQVMvQmQsYUFBVyxvQkFBVWUsS0FBVixDQUFnQkMsT0FBT0MsTUFBUCxrQkFBaEIsQ0FUb0I7QUFVL0JmLFdBQVMsb0JBQVVVLE1BVlk7QUFXL0JSLGtCQUFnQixvQkFBVUcsSUFYSztBQVkvQkYsV0FBUyxvQkFBVUUsSUFaWTtBQWEvQlcsY0FBWSxvQkFBVVQsSUFiUztBQWMvQjtBQUNBVSxnQkFBYyxvQkFBVVYsSUFmTztBQWdCL0JXLGdCQUFjLG9CQUFVWCxJQWhCTztBQWlCL0JZLFdBQVMsb0JBQVVaLElBakJZO0FBa0IvQmEsV0FBUyxvQkFBVWI7QUFsQlksQ0FBZCxFQW1CaEIsRUFuQmdCLEM7a0JBWEFoQixTIiwiZmlsZSI6ImFudGQvdG9vbHRpcC9Db21tb25UaXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtTS30gZnJvbSAnc2stanMnO1xuaW1wb3J0IHtQTEFDRU1FTlQsIFRSSUdHRVJ9IGZyb20gJy4uLy4uL0NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbW9uVGlwIHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IFNLLmFzc2lnbih7fSwge1xuICAgIGFycm93UG9pbnRBdENlbnRlcjogZmFsc2UsXG4gICAgYXV0b0FkanVzdE92ZXJmbG93OiB0cnVlLFxuICAgIG1vdXNlRW50ZXJEZWxheTogMCxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IDAuMSxcbiAgICBwbGFjZW1lbnQ6IFBMQUNFTUVOVC5Ub3AsXG4gICAgdHJpZ2dlcjogVFJJR0dFUi5Ib3ZlcixcbiAgICBkZWZhdWx0VmlzaWJsZTogZmFsc2UsXG4gICAgdmlzaWJsZTogZmFsc2VcbiAgfSwge30pO1xuICBzdGF0aWMgcHJvcFR5cGVzID0gU0suYXNzaWduKHt9LCB7XG4gICAgLy9odHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy90b29sdGlwLWNuLyMlRTUlODUlQjElRTUlOTAlOEMlRTclOUElODQtQVBJXG4gICAgYXJyb3dQb2ludEF0Q2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhdXRvQWRqdXN0T3ZlcmZsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFBvcHVwQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBtb3VzZUVudGVyRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbW91c2VMZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG92ZXJsYXlDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3ZlcmxheVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoUExBQ0VNRU5UKSksXG4gICAgdHJpZ2dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0VmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Db2xsYXBzZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy9odHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy90b29sdGlwLWNuLyMlRTYlQjMlQTglRTYlODQlOEZcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmNcbiAgfSwge30pO1xufVxuIl19