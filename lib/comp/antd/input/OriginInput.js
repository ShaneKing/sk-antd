'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

require('antd/lib/input/style');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _skJs = require('sk-js');

var _Const = require('../../../util/Const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OriginInput = function OriginInput() {
  _classCallCheck(this, OriginInput);
};

OriginInput.defaultProps = _skJs.SK.assign({}, {
  disabled: false,
  size: _Const.SIZE.Default,
  type: _Const.INPUT_TYPE.Text
}, _input2.default.defaultProps, {});
OriginInput.propTypes = _skJs.SK.assign({}, {
  //https://ant.design/components/input-cn/#Input
  addonAfter: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  addonBefore: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  defaultValue: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  prefix: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  size: _propTypes2.default.string,
  suffix: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  type: _propTypes2.default.string,
  value: _propTypes2.default.string,
  onPressEnter: _propTypes2.default.func
}, _input2.default.propTypes, {});
exports.default = OriginInput;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXAvYW50ZC9pbnB1dC9PcmlnaW5JbnB1dC5qcyJdLCJuYW1lcyI6WyJPcmlnaW5JbnB1dCIsImRlZmF1bHRQcm9wcyIsImFzc2lnbiIsImRpc2FibGVkIiwic2l6ZSIsIkRlZmF1bHQiLCJ0eXBlIiwiVGV4dCIsInByb3BUeXBlcyIsImFkZG9uQWZ0ZXIiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJub2RlIiwiYWRkb25CZWZvcmUiLCJkZWZhdWx0VmFsdWUiLCJib29sIiwiaWQiLCJwcmVmaXgiLCJzdWZmaXgiLCJ2YWx1ZSIsIm9uUHJlc3NFbnRlciIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztJQUVxQkEsVzs7OztBQUFBQSxXLENBQ1pDLFksR0FBZSxTQUFHQyxNQUFILENBQVUsRUFBVixFQUFjO0FBQ2xDQyxZQUFVLEtBRHdCO0FBRWxDQyxRQUFNLFlBQUtDLE9BRnVCO0FBR2xDQyxRQUFNLGtCQUFXQztBQUhpQixDQUFkLEVBSW5CLGdCQUFNTixZQUphLEVBSUMsRUFKRCxDO0FBREhELFcsQ0FNWlEsUyxHQUFZLFNBQUdOLE1BQUgsQ0FBVSxFQUFWLEVBQWM7QUFDL0I7QUFDQU8sY0FBWSxvQkFBVUMsU0FBVixDQUFvQixDQUM5QixvQkFBVUMsTUFEb0IsRUFFOUIsb0JBQVVDLElBRm9CLENBQXBCLENBRm1CO0FBTS9CQyxlQUFhLG9CQUFVSCxTQUFWLENBQW9CLENBQy9CLG9CQUFVQyxNQURxQixFQUUvQixvQkFBVUMsSUFGcUIsQ0FBcEIsQ0FOa0I7QUFVL0JFLGdCQUFjLG9CQUFVSCxNQVZPO0FBVy9CUixZQUFVLG9CQUFVWSxJQVhXO0FBWS9CQyxNQUFJLG9CQUFVTCxNQVppQjtBQWEvQk0sVUFBUSxvQkFBVVAsU0FBVixDQUFvQixDQUMxQixvQkFBVUMsTUFEZ0IsRUFFMUIsb0JBQVVDLElBRmdCLENBQXBCLENBYnVCO0FBaUIvQlIsUUFBTSxvQkFBVU8sTUFqQmU7QUFrQi9CTyxVQUFRLG9CQUFVUixTQUFWLENBQW9CLENBQzFCLG9CQUFVQyxNQURnQixFQUUxQixvQkFBVUMsSUFGZ0IsQ0FBcEIsQ0FsQnVCO0FBc0IvQk4sUUFBTSxvQkFBVUssTUF0QmU7QUF1Qi9CUSxTQUFPLG9CQUFVUixNQXZCYztBQXdCL0JTLGdCQUFjLG9CQUFVQztBQXhCTyxDQUFkLEVBeUJoQixnQkFBTWIsU0F6QlUsRUF5QkMsRUF6QkQsQztrQkFOQVIsVyIsImZpbGUiOiJjb21wL2FudGQvaW5wdXQvT3JpZ2luSW5wdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0fSBmcm9tICdhbnRkJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1NLfSBmcm9tICdzay1qcyc7XG5pbXBvcnQge0lOUFVUX1RZUEUsIFNJWkV9IGZyb20gJy4uLy4uLy4uL3V0aWwvQ29uc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmlnaW5JbnB1dCB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSBTSy5hc3NpZ24oe30sIHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2l6ZTogU0laRS5EZWZhdWx0LFxuICAgIHR5cGU6IElOUFVUX1RZUEUuVGV4dFxuICB9LCBJbnB1dC5kZWZhdWx0UHJvcHMsIHt9KTtcbiAgc3RhdGljIHByb3BUeXBlcyA9IFNLLmFzc2lnbih7fSwge1xuICAgIC8vaHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvaW5wdXQtY24vI0lucHV0XG4gICAgYWRkb25BZnRlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGVcbiAgICBdKSxcbiAgICBhZGRvbkJlZm9yZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGVcbiAgICBdKSxcbiAgICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHByZWZpeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGVcbiAgICBdKSxcbiAgICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1ZmZpeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGVcbiAgICBdKSxcbiAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uUHJlc3NFbnRlcjogUHJvcFR5cGVzLmZ1bmNcbiAgfSwgSW5wdXQucHJvcFR5cGVzLCB7fSk7XG59XG4iXX0=