'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _skJs = require('sk-js');

var _Const = require('../../../util/Const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CommonTip = function CommonTip() {
  _classCallCheck(this, CommonTip);
};

CommonTip.defaultProps = _skJs.SK.assign({}, {
  arrowPointAtCenter: false,
  autoAdjustOverflow: true,
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0.1,
  placement: _Const.PLACEMENT.Top,
  trigger: _Const.TRIGGER.Hover,
  defaultVisible: false,
  visible: false
}, {});
CommonTip.propTypes = _skJs.SK.assign({}, {
  //https://ant.design/components/tooltip-cn/#%E5%85%B1%E5%90%8C%E7%9A%84-API
  arrowPointAtCenter: _propTypes2.default.bool,
  autoAdjustOverflow: _propTypes2.default.bool,
  getPopupContainer: _propTypes2.default.func,
  mouseEnterDelay: _propTypes2.default.number,
  mouseLeaveDelay: _propTypes2.default.number,
  overlayClassName: _propTypes2.default.string,
  overlayStyle: _propTypes2.default.object,
  placement: _propTypes2.default.oneOf(Object.values(_Const.PLACEMENT)),
  trigger: _propTypes2.default.string,
  defaultVisible: _propTypes2.default.bool,
  visible: _propTypes2.default.bool,
  onCollapse: _propTypes2.default.func,
  //https://ant.design/components/tooltip-cn/#%E6%B3%A8%E6%84%8F
  onMouseEnter: _propTypes2.default.func,
  onMouseLeave: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onClick: _propTypes2.default.func
}, {});
exports.default = CommonTip;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXAvYW50ZC90b29sdGlwL0NvbW1vblRpcC5qcyJdLCJuYW1lcyI6WyJDb21tb25UaXAiLCJkZWZhdWx0UHJvcHMiLCJhc3NpZ24iLCJhcnJvd1BvaW50QXRDZW50ZXIiLCJhdXRvQWRqdXN0T3ZlcmZsb3ciLCJtb3VzZUVudGVyRGVsYXkiLCJtb3VzZUxlYXZlRGVsYXkiLCJwbGFjZW1lbnQiLCJUb3AiLCJ0cmlnZ2VyIiwiSG92ZXIiLCJkZWZhdWx0VmlzaWJsZSIsInZpc2libGUiLCJwcm9wVHlwZXMiLCJib29sIiwiZ2V0UG9wdXBDb250YWluZXIiLCJmdW5jIiwibnVtYmVyIiwib3ZlcmxheUNsYXNzTmFtZSIsInN0cmluZyIsIm92ZXJsYXlTdHlsZSIsIm9iamVjdCIsIm9uZU9mIiwiT2JqZWN0IiwidmFsdWVzIiwib25Db2xsYXBzZSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uRm9jdXMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7Ozs7SUFFcUJBLFM7Ozs7QUFBQUEsUyxDQUNaQyxZLEdBQWUsU0FBR0MsTUFBSCxDQUFVLEVBQVYsRUFBYztBQUNsQ0Msc0JBQW9CLEtBRGM7QUFFbENDLHNCQUFvQixJQUZjO0FBR2xDQyxtQkFBaUIsQ0FIaUI7QUFJbENDLG1CQUFpQixHQUppQjtBQUtsQ0MsYUFBVyxpQkFBVUMsR0FMYTtBQU1sQ0MsV0FBUyxlQUFRQyxLQU5pQjtBQU9sQ0Msa0JBQWdCLEtBUGtCO0FBUWxDQyxXQUFTO0FBUnlCLENBQWQsRUFTbkIsRUFUbUIsQztBQURIWixTLENBV1phLFMsR0FBWSxTQUFHWCxNQUFILENBQVUsRUFBVixFQUFjO0FBQy9CO0FBQ0FDLHNCQUFvQixvQkFBVVcsSUFGQztBQUcvQlYsc0JBQW9CLG9CQUFVVSxJQUhDO0FBSS9CQyxxQkFBbUIsb0JBQVVDLElBSkU7QUFLL0JYLG1CQUFpQixvQkFBVVksTUFMSTtBQU0vQlgsbUJBQWlCLG9CQUFVVyxNQU5JO0FBTy9CQyxvQkFBa0Isb0JBQVVDLE1BUEc7QUFRL0JDLGdCQUFjLG9CQUFVQyxNQVJPO0FBUy9CZCxhQUFXLG9CQUFVZSxLQUFWLENBQWdCQyxPQUFPQyxNQUFQLGtCQUFoQixDQVRvQjtBQVUvQmYsV0FBUyxvQkFBVVUsTUFWWTtBQVcvQlIsa0JBQWdCLG9CQUFVRyxJQVhLO0FBWS9CRixXQUFTLG9CQUFVRSxJQVpZO0FBYS9CVyxjQUFZLG9CQUFVVCxJQWJTO0FBYy9CO0FBQ0FVLGdCQUFjLG9CQUFVVixJQWZPO0FBZ0IvQlcsZ0JBQWMsb0JBQVVYLElBaEJPO0FBaUIvQlksV0FBUyxvQkFBVVosSUFqQlk7QUFrQi9CYSxXQUFTLG9CQUFVYjtBQWxCWSxDQUFkLEVBbUJoQixFQW5CZ0IsQztrQkFYQWhCLFMiLCJmaWxlIjoiY29tcC9hbnRkL3Rvb2x0aXAvQ29tbW9uVGlwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7U0t9IGZyb20gJ3NrLWpzJztcbmltcG9ydCB7UExBQ0VNRU5ULCBUUklHR0VSfSBmcm9tICcuLi8uLi8uLi91dGlsL0NvbnN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbW9uVGlwIHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IFNLLmFzc2lnbih7fSwge1xuICAgIGFycm93UG9pbnRBdENlbnRlcjogZmFsc2UsXG4gICAgYXV0b0FkanVzdE92ZXJmbG93OiB0cnVlLFxuICAgIG1vdXNlRW50ZXJEZWxheTogMCxcbiAgICBtb3VzZUxlYXZlRGVsYXk6IDAuMSxcbiAgICBwbGFjZW1lbnQ6IFBMQUNFTUVOVC5Ub3AsXG4gICAgdHJpZ2dlcjogVFJJR0dFUi5Ib3ZlcixcbiAgICBkZWZhdWx0VmlzaWJsZTogZmFsc2UsXG4gICAgdmlzaWJsZTogZmFsc2VcbiAgfSwge30pO1xuICBzdGF0aWMgcHJvcFR5cGVzID0gU0suYXNzaWduKHt9LCB7XG4gICAgLy9odHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy90b29sdGlwLWNuLyMlRTUlODUlQjElRTUlOTAlOEMlRTclOUElODQtQVBJXG4gICAgYXJyb3dQb2ludEF0Q2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhdXRvQWRqdXN0T3ZlcmZsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFBvcHVwQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBtb3VzZUVudGVyRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbW91c2VMZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG92ZXJsYXlDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3ZlcmxheVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC52YWx1ZXMoUExBQ0VNRU5UKSksXG4gICAgdHJpZ2dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZWZhdWx0VmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Db2xsYXBzZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLy9odHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy90b29sdGlwLWNuLyMlRTYlQjMlQTglRTYlODQlOEZcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmNcbiAgfSwge30pO1xufVxuIl19